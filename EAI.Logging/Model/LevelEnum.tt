<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="Newtonsoft.Json" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="Newtonsoft.Json" #>
<#@ import namespace="Newtonsoft.Json.Linq" #>
<#@ output extension=".txt" #>
<#
	    string path = this.Host.ResolvePath("Prep.json");

        JToken? prepdata = null;
	    using (var sr = new StreamReader(path))
        using (var jr = new JsonTextReader(sr))
        {
            prepdata = JToken.ReadFrom(jr);
        }

        var level = prepdata.SelectToken("Level");
        var levelDic = level?.ToObject<Dictionary<string, int>>() ?? new Dictionary<string, int>();

#>
namespace EAI.Logging.Model
{
    public enum LogLevel
    {
        <#foreach(var l in levelDic) 
{#>
        <#= l.Key#> = <#= l.Value#>,
<#}#>
    }
}
<#
        SaveOutput("LogLevel.cs");
#>
success
<#+
private void SaveOutput(string outputFileName) 
{
  string templateDirectory = Path.GetDirectoryName(Host.TemplateFile);
  string outputFilePath = Path.Combine(templateDirectory, outputFileName);
  File.WriteAllText(outputFilePath, this.GenerationEnvironment.ToString()); 
  this.GenerationEnvironment.Clear();
}
#>